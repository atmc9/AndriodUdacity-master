Lesson1

Gradle:  Build toolkit that manages Dependencies, Builds and packages the byte code along with Resources into Android Application package file(apk)

ADB(Android Debug Bridge): Used to push the apk files to device. ADB is a command line utility included with Android's SDK.

Components in apps: Activities, Services, BroadCast Receivers, Content Providers known to Android Framework as they are registered in Android Manifest file.

Activity: Single focused thing an user can do. Activities are responsible for creating the window that your application uses to draw and receive events from the system.

Type of View : UI Components(inherited from View), Container View(inherited from ViewGroup)

R Class: When application is compiled the R class is generated. It creates constants that allow us to dynamically identify the various contents of the res folder, including layouts.

Layout Inference: Helps in making layouts more responsive, can easily create seperate layout for potrait, Landscape.

	Frame Layout: Great to use if we have 1 child view. Like list view that fills the entire content area.
	Linear Layout: Use for stacking Views horizontally or Vertically. Will support responsive design 
	Constraint Layout: Complex, can have lot of childs.
	



Lesson2
	
Log Levels: (What a Terrible Failure, Error, Warn, Info, Debug, Verbose)    =>Syntax:  Log.e/w/i/d/v (String Tag, String message);

Toast: Provides simple feedback about an operation in a small popup. Automatically disappear after certain time.

Adding Menu items: ShowAsAction = "ifRoom/always" XML attribute is used to show the menu item on Toolbar.

Uri.Builder: Creates a well formed Uri

Permissions: All permission of Device services like Internet, Camera, Phone book, Call etc should be explicitly mentioned in manifest file.

Thread: Every app runs on seperate thread
	Sigle user Interfacr Thread: This thread is responsible for getting events from various sensors and setting up the next frame to draw. Each draw should be in less than 17MS. (Means we want to do little as possible on this thread).
	Run the network task on a secondary execution thread provided by Async Task.

Async Task: Allows us to run the task on a background thread, while publishing the results to the UI thread. UI Thread have handler, message queue. Async task takes (Params - parameter type sent to the task upon execution, Progress - type published to update progress during the background computation, Result- Type of result of the bcakground computation)



Lesson3

RecyclerView: A queue that keeps the previously created list items that are not in Visible screen.  Easy to filter items using RecyclerView. 
	Adapter: RecyclerView has adapter that provides new views, also binds data from data source to views.  
	Viewholder: Adapter sends the views to an object called Viewholder. Cantains refernce to rootView object for the item. Expected to use it to cash the view objects represented in the layout make it less costly to update the views with new data. This way find view by ID called for each data view whenever that new item is created, not each time you want to populate the views in the item with data. 
	LayoutManager: This tells the RecyclerView how to layout all those views. 
	
Dimension: SP, DP: They are not actuall pixel sizes, PX = DP * (dpi/160)    where dpi is pixel density mostly >480 in mobiles 
			Use SP if we have text preference, 
			
LayoutLinflator: Used to inflate a view from layoutItem template by taking 3 params (layoutIDforListItem, viewGroup, bool should attached to parent Immediately)

RecyclerViewAdapter:  onCreateViewHolder -> takes the viewGroup, viewType and inflates a view from layout, finally creates and returns the viewHolder. 
					  onBindViewHolder -> takes the viewHolder, position and sets the data on view
					  getItemCount -> returns the numberofItems
					  
LayoutManger: 3 layoutManagers LinearLayoutManger, grid, StaggerdGridLayoutManager



Lesson 4 (Structure of app, Navigation between screens, USing Activites that come from other app's)

Intent Framework: For communicating between Activities we use messaging objects called Intents. (Starting a new activity, picking or displaying a photo, making a phone call)
				  Anology - each Intent is like a envelope which include which compoent it has be delivered, small amount of data, 

Move between Activities: StartActivity(Intent);

Implicit Intents : opening websites, Making calls, Sharing text on Twitter etc



Lesson 5

LifeCycle order:  onCreate-> [Created] onStart -> [Visible] onResume ->[Active] -> onPasue [Paused] onStop ->[Stopped] onDestroy ->[Destroyed]

Edit text will be saved even when recreating the State.

Async network calls Lifecycle : If the Activity that started the Aysnc calls is destroyed it delivers data to Zombie activity.

Loader: provides a platform for Asyncronous loading of data. They are registered by ID with a component called LoaderManager. They live beyound the lifeCycle of Activity. Preventing duplicate loads happening in parallel.
Ex: AysncTasKLoader

Caching loader results: As loaders are tied to application, we can cache the previous results and get the results after restart.



Lesson 6:

Prefernces: Adroid stores the app level settings using preferences that live through put in the app life cycle.

Data Persistence: onSavedInstanceState: (Key Value)-> COMPLEX Saved Instance state(If app is closed, the data saved is gone. Mainaly used for temp data while rotating the screen)
				  SharedPreferences: (Key Value) ->("String", PRIMITIVIE) used for storing the name on a game app or in broswer app stroing the previous url. When the app is closed and open it still keeps the data.
				  SQLLite Database: Organized, more complicated text/numeric/ boolean data
				  Internal/Extrenal Storage: Multimedia or large data.
				  Server(ex:FirBase): Data accessable my multiple devices
				  
SharedPreferenceChangeListener: It is triggered after any value is saved to the SharedPreferences file.

PreferenceChangeListener: It is triggered before a value is saved to the SharedPreferences file. Because of this, it can prevent an invalid update to a preference. PreferenceChangeListeners are also attached to a single preference.



				  
				  
				   












					  
					  




	
	
	






	



	




